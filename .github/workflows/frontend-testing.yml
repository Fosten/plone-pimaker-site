name: Frontend testing CI

on:
  push:
    branches:
      - main
    paths:
      - "frontend/**"
  workflow_dispatch:

env:
  node-version: 18.x

jobs:

  eslint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4.1.1

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.node-version }}
          cache: 'yarn'
          cache-dependency-path: 'frontend/yarn.lock'

      - name: Install packages
        run: make install

      - name: Lint
        run: yarn run lint:ci

  prettier:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4.1.1

      - name: Run Prettier
        run: npx prettier@2.0.5 --single-quote --check 'src/**/*.{js,jsx,ts,tsx,css,scss}' --config=package.json


  i18n:
    name: i18n sync
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4.1.1

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.node-version }}
          cache: 'yarn'
          cache-dependency-path: 'frontend/yarn.lock'

      - name: Install packages
        run: make install

      - name: Test i18n sync
        run: make i18n-ci

  unit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4.1.1

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.node-version }}
          cache: 'yarn'
          cache-dependency-path: 'frontend/yarn.lock'

      - name: Install packages
        run: make install

      - name: Test
        run: make test

  release:
    runs-on: ubuntu-latest
    needs: [eslint, prettier, i18n, unit]
    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: |
            ghcr.io/fosten/plone-pimaker-site-frontend
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 3000:3000 ghcr.io/fosten/plone-pimaker-site-frontend:latest
          flavor:
            latest=false
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0

      - name: Login to Container Registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5.3.0
        with:
          platforms: linux/amd64
          context: frontend/
          file: frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: $${{ steps.meta.outputs.labels }}

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy to cluster
        uses: kitconcept/docker-stack-deploy@v1.2.0
        with:
          registry: "ghcr.io"
          username: ${{ github.actor }}
          password: ${{ secrets.DEPLOY_GHCR_READ_TOKEN }}
          remote_host: ${{ vars.DEPLOY_HOST }}
          remote_port: ${{ vars.DEPLOY_PORT }}
          remote_user: ${{ vars.DEPLOY_USER }}
          remote_private_key: ${{ secrets.DEPLOY_SSH }}
          stack_file: devops/stacks/testing.pimaker.org.yml
          stack_name: testing-pimaker-org
          stack_param: ${{ github.ref_name }}
          env_file: ${{ secrets.ENV_FILE }}
          deploy_timeout: 480
